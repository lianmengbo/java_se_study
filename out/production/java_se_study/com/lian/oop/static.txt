关键字：static
当我们在编写一个类时候，如果一个属性，想要被所有对象所共用，就使用到了static关键字

如果想让一个成员变量被类的所有实例所共享，就用static修饰即可，称为类变量（或类属性）！
### static关键字

- 使用范围：
  - 在Java类中，可用static修饰属性、方法、代码块、内部类
- 被修饰后的成员具备以下特点：
  - 随着类的加载而加载
  - 优先于对象存在
  - 修饰的成员，被所有对象所共享
  - 访问权限允许时，可不创建对象，直接被类调用、
 成员变量按照static修饰的分为：静态变量(类变量)、非静态变量和实例变量
 静态变量 jdk1.6说是在方法区中  jdk7 静态变量放在堆中 回收及时，jdk8方法区叫做原空间，静态变量仍然在堆中

 静态变量随着类的加载而加载，因为类只加载一次，所以静态变量也只有一份，每个对象拥有相同的类变量（静态变量）
 静态变量可以被类直接调用，也可以使用对象来调用。
 实例变量只能被对象调用。
 静态变量随着类的卸载，而卸载。
 实例变量随着对象的消亡，而失效


 静态方法 static修饰的方法：
>随着类的加载而加载
>通过类本身就可以调用 类.方法名（）
>静态方法内只能调用静态的属性或者静态的方法，不可以调用非静态的属性以及方法



#### 1.4.2 静态方法的特点

- 静态方法在本类的任意方法、代码块、构造器中都可以直接被调用。
- 只要权限修饰符允许，静态方法在其他类中可以通过“类名.静态方法“的方式调用。也可以通过”对象.静态方法“的方式调用（但是更推荐使用类名.静态方法的方式）。
- 在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。
- 静态方法可以被子类继承，但不能被子类重写。
- 静态方法的调用都只看编译时类型。
- 因为不需要实例就可以访问static方法，因此static方法内部不能有this，也不能有super。如果有重名问题，使用“类名.”进行区别。

